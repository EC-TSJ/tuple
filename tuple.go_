package main

// // TupleVA is a group of 10 elements.
// type TupleVA[A any, B any, C any, D any, E any, F any, G any, H any, I any, J any] struct {
// 	A A
// 	B B
// 	C C
// 	D D
// 	E E
// 	F F
// 	G G
// 	H H
// 	I I
// 	J J
// }

// // TupleVB is a group of 11 elements.
// type TupleVB[A any, B any, C any, D any, E any, F any, G any, H any, I any, J any, K any] struct {
// 	A A
// 	B B
// 	C C
// 	D D
// 	E E
// 	F F
// 	G G
// 	H H
// 	I I
// 	J J
// 	K K
// }

// // TupleVC is a group of 12 elements.
// type TupleVC[A any, B any, C any, D any, E any, F any, G any, H any, I any, J any, K any, L any] struct {
// 	A A
// 	B B
// 	C C
// 	D D
// 	E E
// 	F F
// 	G G
// 	H H
// 	I I
// 	J J
// 	K K
// 	L L
// }

// // TupleVD is a group of 13 elements.
// type TupleVD[A any, B any, C any, D any, E any, F any, G any, H any, I any, J any, K any, L any, M any] struct {
// 	A A
// 	B B
// 	C C
// 	D D
// 	E E
// 	F F
// 	G G
// 	H H
// 	I I
// 	J J
// 	K K
// 	L L
// 	M M
// }

// // TupleVE is a group of 14 elements.
// type TupleVE[A any, B any, C any, D any, E any, F any, G any, H any, I any, J any, K any, L any, M any, N any] struct {
// 	A A
// 	B B
// 	C C
// 	D D
// 	E E
// 	F F
// 	G G
// 	H H
// 	I I
// 	J J
// 	K K
// 	L L
// 	M M
// 	N N
// }

// // TupleVF is a group of 15 elements.
//
//	type TupleVF[A any, B any, C any, D any, E any, F any, G any, H any, I any, J any, K any, L any, M any, N any, O any] struct {
//		A A
//		B B
//		C C
//		D D
//		E E
//		F F
//		G G
//		H H
//		I I
//		J J
//		K K
//		L L
//		M M
//		N N
//		O O
//	}

// func (*TupleV1[A]) New(a A) *TupleV1[A] {
// 	return &TupleV1[A]{A: a}
// }
// func (t *TupleV1[A]) Get(pos int) any                    { return get(*t, pos) }
// func (t *TupleV1[A]) Count(pos any) int                  { return Count(*t, pos) }
// func (t *TupleV1[A]) Filter(fn func(...any) []any) []any { return filter(*t, fn) }
// func (t *TupleV1[A]) ForEach(fn func(any))               { ForEach(*t, fn) }
// func (t *TupleV1[A]) Index(pos any) (int, string)        { return Index(*t, pos) }
// func (t *TupleV1[A]) Length() int                        { return Length(*t) }
// func (t *TupleV1[A]) Max() any                           { return max(*t) }
// func (t *TupleV1[A]) Min() any                           { return min(*t) }
// func (t *TupleV1[A]) ToSlice() []any                     { return ToSlice(*t) }

// func (*TupleV2[A, B]) New(a A, b B) *TupleV2[A, B] {
// 	return &TupleV2[A, B]{A: a, B: b}
// }
// func (t *TupleV2[A, B]) Get(pos int) any                    { return get(*t, pos) }
// func (t *TupleV2[A, B]) Count(pos any) int                  { return Count(*t, pos) }
// func (t *TupleV2[A, B]) Filter(fn func(...any) []any) []any { return filter(*t, fn) }
// func (t *TupleV2[A, B]) ForEach(fn func(any))               { ForEach(*t, fn) }
// func (t *TupleV2[A, B]) Index(pos any) (int, string)        { return Index(*t, pos) }
// func (t *TupleV2[A, B]) Length() int                        { return Length(*t) }
// func (t *TupleV2[A, B]) Max() any                           { return max(*t) }
// func (t *TupleV2[A, B]) Min() any                           { return min(*t) }
// func (t *TupleV2[A, B]) ToSlice() []any                     { return ToSlice(*t) }

// func (*TupleV3[A, B, C]) New(a A, b B, c C) *TupleV3[A, B, C] {
// 	return &TupleV3[A, B, C]{A: a, B: b, C: c}
// }
// func (t *TupleV3[A, B, C]) Get(pos int) any                    { return get(*t, pos) }
// func (t *TupleV3[A, B, C]) Count(pos any) int                  { return Count(*t, pos) }
// func (t *TupleV3[A, B, C]) Filter(fn func(...any) []any) []any { return filter(*t, fn) }
// func (t *TupleV3[A, B, C]) ForEach(fn func(any))               { ForEach(*t, fn) }
// func (t *TupleV3[A, B, C]) Index(pos any) (int, string)        { return Index(*t, pos) }
// func (t *TupleV3[A, B, C]) Length() int                        { return Length(*t) }
// func (t *TupleV3[A, B, C]) Max() any                           { return max(*t) }
// func (t *TupleV3[A, B, C]) Min() any                           { return min(*t) }
// func (t *TupleV3[A, B, C]) ToSlice() []any                     { return ToSlice(*t) }

// func (*TupleV4[A, B, C, D]) New(a A, b B, c C, d D) *TupleV4[A, B, C, D] {
// 	return &TupleV4[A, B, C, D]{A: a, B: b, C: c, D: d}
// }
// func (t *TupleV4[A, B, C, D]) Get(pos int) any                    { return get(*t, pos) }
// func (t *TupleV4[A, B, C, D]) Count(pos any) int                  { return Count(*t, pos) }
// func (t *TupleV4[A, B, C, D]) Filter(fn func(...any) []any) []any { return filter(*t, fn) }
// func (t *TupleV4[A, B, C, D]) ForEach(fn func(any))               { ForEach(*t, fn) }
// func (t *TupleV4[A, B, C, D]) Index(pos any) (int, string)        { return Index(*t, pos) }
// func (t *TupleV4[A, B, C, D]) Length() int                        { return Length(*t) }
// func (t *TupleV4[A, B, C, D]) Max() any                           { return max(*t) }
// func (t *TupleV4[A, B, C, D]) Min() any                           { return min(*t) }
// func (t *TupleV4[A, B, C, D]) ToSlice() []any                     { return ToSlice(*t) }

// func (*TupleV5[A, B, C, D, E]) New(a A, b B, c C, d D, e E) *TupleV5[A, B, C, D, E] {
// 	return &TupleV5[A, B, C, D, E]{A: a, B: b, C: c, D: d, E: e}
// }
// func (t *TupleV5[A, B, C, D, E]) Get(pos int) any                    { return get(*t, pos) }
// func (t *TupleV5[A, B, C, D, E]) Count(pos any) int                  { return Count(*t, pos) }
// func (t *TupleV5[A, B, C, D, E]) Filter(fn func(...any) []any) []any { return filter(*t, fn) }
// func (t *TupleV5[A, B, C, D, E]) ForEach(fn func(any))               { ForEach(*t, fn) }
// func (t *TupleV5[A, B, C, D, E]) Index(pos any) (int, string)        { return Index(*t, pos) }
// func (t *TupleV5[A, B, C, D, E]) Length() int                        { return Length(*t) }
// func (t *TupleV5[A, B, C, D, E]) Max() any                           { return max(*t) }
// func (t *TupleV5[A, B, C, D, E]) Min() any                           { return min(*t) }
// func (t *TupleV5[A, B, C, D, E]) ToSlice() []any                     { return ToSlice(*t) }

// func (*TupleV6[A, B, C, D, E, F]) New(a A, b B, c C, d D, e E, f F) *TupleV6[A, B, C, D, E, F] {
// 	return &TupleV6[A, B, C, D, E, F]{A: a, B: b, C: c, D: d, E: e, F: f}
// }
// func (t *TupleV6[A, B, C, D, E, F]) Get(pos int) any                    { return get(*t, pos) }
// func (t *TupleV6[A, B, C, D, E, F]) Count(pos any) int                  { return Count(*t, pos) }
// func (t *TupleV6[A, B, C, D, E, F]) Filter(fn func(...any) []any) []any { return filter(*t, fn) }
// func (t *TupleV6[A, B, C, D, E, F]) ForEach(fn func(any))               { ForEach(*t, fn) }
// func (t *TupleV6[A, B, C, D, E, F]) Index(pos any) (int, string)        { return Index(*t, pos) }
// func (t *TupleV6[A, B, C, D, E, F]) Length() int                        { return Length(*t) }
// func (t *TupleV6[A, B, C, D, E, F]) Max() any                           { return max(*t) }
// func (t *TupleV6[A, B, C, D, E, F]) Min() any                           { return min(*t) }
// func (t *TupleV6[A, B, C, D, E, F]) ToSlice() []any                     { return ToSlice(*t) }

// func (*TupleV7[A, B, C, D, E, F, G]) New(a A, b B, c C, d D, e E, f F, g G) *TupleV7[A, B, C, D, E, F, G] {
// 	return &TupleV7[A, B, C, D, E, F, G]{A: a, B: b, C: c, D: d, E: e, F: f, G: g}
// }
// func (t *TupleV7[A, B, C, D, E, F, G]) Get(pos int) any                    { return get(*t, pos) }
// func (t *TupleV7[A, B, C, D, E, F, G]) Count(pos any) int                  { return Count(*t, pos) }
// func (t *TupleV7[A, B, C, D, E, F, G]) Filter(fn func(...any) []any) []any { return filter(*t, fn) }
// func (t *TupleV7[A, B, C, D, E, F, G]) ForEach(fn func(any))               { ForEach(*t, fn) }
// func (t *TupleV7[A, B, C, D, E, F, G]) Index(pos any) (int, string)        { return Index(*t, pos) }
// func (t *TupleV7[A, B, C, D, E, F, G]) Length() int                        { return Length(*t) }
// func (t *TupleV7[A, B, C, D, E, F, G]) Max() any                           { return max(*t) }
// func (t *TupleV7[A, B, C, D, E, F, G]) Min() any                           { return min(*t) }
// func (t *TupleV7[A, B, C, D, E, F, G]) ToSlice() []any                     { return ToSlice(*t) }

// func (*TupleV8[A, B, C, D, E, F, G, H]) New(a A, b B, c C, d D, e E, f F, g G, h H) *TupleV8[A, B, C, D, E, F, G, H] {
// 	return &TupleV8[A, B, C, D, E, F, G, H]{A: a, B: b, C: c, D: d, E: e, F: f, G: g, H: h}
// }
// func (t *TupleV8[A, B, C, D, E, F, G, H]) Get(pos int) any                    { return get(*t, pos) }
// func (t *TupleV8[A, B, C, D, E, F, G, H]) Count(pos any) int                  { return Count(*t, pos) }
// func (t *TupleV8[A, B, C, D, E, F, G, H]) Filter(fn func(...any) []any) []any { return filter(*t, fn) }
// func (t *TupleV8[A, B, C, D, E, F, G, H]) ForEach(fn func(any))               { ForEach(*t, fn) }
// func (t *TupleV8[A, B, C, D, E, F, G, H]) Index(pos any) (int, string)        { return Index(*t, pos) }
// func (t *TupleV8[A, B, C, D, E, F, G, H]) Length() int                        { return Length(*t) }
// func (t *TupleV8[A, B, C, D, E, F, G, H]) Max() any                           { return max(*t) }
// func (t *TupleV8[A, B, C, D, E, F, G, H]) Min() any                           { return min(*t) }
// func (t *TupleV8[A, B, C, D, E, F, G, H]) ToSlice() []any                     { return ToSlice(*t) }

// func (*TupleV9[A, B, C, D, E, F, G, H, I]) New(a A, b B, c C, d D, e E, f F, g G, h H, i I) *TupleV9[A, B, C, D, E, F, G, H, I] {
// 	return &TupleV9[A, B, C, D, E, F, G, H, I]{A: a, B: b, C: c, D: d, E: e, F: f, G: g, H: h, I: i}
// }
// func (t *TupleV9[A, B, C, D, E, F, G, H, I]) Get(pos int) any   { return get(*t, pos) }
// func (t *TupleV9[A, B, C, D, E, F, G, H, I]) Count(pos any) int { return Count(*t, pos) }
// func (t *TupleV9[A, B, C, D, E, F, G, H, I]) Filter(fn func(...any) []any) []any {
// 	return filter(*t, fn)
// }
// func (t *TupleV9[A, B, C, D, E, F, G, H, I]) ForEach(fn func(any))        { ForEach(*t, fn) }
// func (t *TupleV9[A, B, C, D, E, F, G, H, I]) Index(pos any) (int, string) { return Index(*t, pos) }
// func (t *TupleV9[A, B, C, D, E, F, G, H, I]) Length() int                 { return Length(*t) }
// func (t *TupleV9[A, B, C, D, E, F, G, H, I]) Max() any                    { return max(*t) }
// func (t *TupleV9[A, B, C, D, E, F, G, H, I]) Min() any                    { return min(*t) }
// func (t *TupleV9[A, B, C, D, E, F, G, H, I]) ToSlice() []any              { return ToSlice(*t) }

// // concreteCat,_ := reflect.ValueOf(cat).Interface().(Cat)
